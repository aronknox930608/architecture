apply plugin: 'com.android.application'

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        applicationId "com.example.android.testing.notes"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'
    }

    buildTypes {
        debug {
            // Run code coverage reports by default on debug builds.
            // testCoverageEnabled = true
        }
    }

    // If you need to add more flavors, consider using flavor dimensions.
    productFlavors {
        mock {
            applicationIdSuffix = ".mock"
        }
        prod {

        }
    }

    /* Since Android M (Api 23) Android follows a new permission model, so called
    "Runtime Permissions". Therefore applications targeting M and above will need to request their
    permissions at runtime.

    Runtime permissions have quite an impact on automated Ui tests, since they prompt the user with
    a system dialog. The only way to get around this is to grant the permissions before running the
    tests on the device. The "grantRuntimePermissionTask" task runs the "adb shell pm grant" command
    to grant a permission before any tests are run.

    If tests are run from command line using gradle wrapper this task will be automatically
    executed when the connectedAndroidTest task runs. If run from Android Studio this tasks needs to
    be added to you test run configuration so it can be executed before the app is launched.

    1. Click on "Edit Configurations..." at the top of Android Studio or right click the "notes"
       package in the "androidTestMock" flavor and click "Select Tests in..."
    2. Select your test run configuration for the "androidTestMock" source set.
    3. At the bottom of the configuration window click the "+ Button" to add a "Before Launch" action.
    4. From the drop down select "Run gradle Task".
    5. Enter the task that you want to run "grantRuntimePermissionMockDebug".
    6. Click ok, followed by apply to close the run configuration window.
    7. Run the test as usual by pressing the "Play" button right next the newly configured run configuration
    */
    android.applicationVariants.all { variant ->
        if (!variant.buildType.name.equals('release')) { // Only add this task to debug builds
            variant.productFlavors.each { productFlavor ->
                def grantRuntimePermissionTask = tasks.create(
                        name: "grantRuntimePermission${variant.name.capitalize()}",
                        type: Exec,
                        dependsOn: "install${variant.name.capitalize()}") {
                    def adb = android.getAdbExe().toString()
                    def adbPmGrantCmd = "$adb shell pm grant $android.defaultConfig.applicationId.$productFlavor.name android.permission.WRITE_EXTERNAL_STORAGE".
                            split(' ')
                    group 'install'
                    description "Granting runtime permission for: android.permission.WRITE_EXTERNAL_STORAGE"
                    commandLine adbPmGrantCmd
                    standardOutput new ByteArrayOutputStream()
                    doFirst {
                        println "*** Granting permission for ${variant.name.capitalize()} ***"
                        println "Running adb: $adbPmGrantCmd"
                    }
                    doLast{
                        if (execResult.exitValue == 0 && standardOutput.size() > 0 ) {
                            def stdOut = standardOutput.toString()
                            if (stdOut.contains("java.lang.SecurityException")) {
                                println("Runtime permission cannot be granted, this is expected" +
                                        "behaviour on Android Api levels < 22!")
                            } else {
                                println("Runtime permission cannot be granted, something went wrong:")
                                println standardOutput.toString()
                            }
                        }
                    }
                }
            }
            tasks.whenTaskAdded { task ->
                // Add this task to the task graph so the permission can be granted before the
                // connectedAndroidTest task runs!
                if (task.name.startsWith("connected${variant.name.capitalize()}AndroidTest")) {
                    task.dependsOn grantRuntimePermissionTask
                }
            }
        }
    }

    // Remove mockRelease as it's not needed.
    android.variantFilter { variant ->
        if(variant.buildType.name.equals('release')
                && variant.getFlavors().get(0).name.equals('mock')) {
            variant.setIgnore(true);
        }
    }

    // Always show the result of every unit test, even if it passes.
    testOptions.unitTests.all {
        testLogging {
            events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
        }
    }
}

/*
 Dependency versions are defined in the top level build.gradle file. This helps keeping track of
 all versions in a single place. This improves readability and helps managing project complexity.
 */
dependencies {
    // App's dependencies, including test
    compile "com.android.support:appcompat-v7:$rootProject.supportLibraryVersion"
    compile "com.android.support:cardview-v7:$rootProject.supportLibraryVersion"
    compile "com.android.support:design:$rootProject.supportLibraryVersion"
    compile "com.android.support:recyclerview-v7:$rootProject.supportLibraryVersion"
    compile "com.android.support:support-v4:$rootProject.supportLibraryVersion"
    compile "com.google.guava:guava:$rootProject.guavaVersion"
    compile "com.github.bumptech.glide:glide:$rootProject.glideVersion"
    compile 'com.android.support.test.espresso:espresso-idling-resource:2.2.1'

    // Dependencies for local unit tests
    testCompile "junit:junit:$rootProject.ext.junitVersion"
    testCompile "org.mockito:mockito-all:$rootProject.ext.mockitoVersion"
    testCompile "org.hamcrest:hamcrest-all:$rootProject.ext.hamcrestVersion"
    testCompile "org.powermock:powermock-module-junit4:$rootProject.ext.powerMockito"
    testCompile "org.powermock:powermock-api-mockito:$rootProject.ext.powerMockito"

    // Android Testing Support Library's runner and rules
    androidTestCompile "com.android.support.test:runner:$rootProject.ext.runnerVersion"
    androidTestCompile "com.android.support.test:rules:$rootProject.ext.runnerVersion"

    // Espresso UI Testing
    androidTestCompile "com.android.support.test.espresso:espresso-core:$rootProject.ext.espressoVersion"
    androidTestCompile ("com.android.support.test.espresso:espresso-contrib:$rootProject.ext.espressoVersion") {
        exclude module: 'recyclerview-v7'
    }
    androidTestCompile "com.android.support.test.espresso:espresso-intents:$rootProject.ext.espressoVersion"
}
