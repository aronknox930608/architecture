apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'

android {
    compileSdkVersion rootProject.ext.compileSdkVersion

    defaultConfig {
        applicationId "com.example.android.architecture.blueprints.todomvvmlive"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
    }

    android {
        sourceSets {
            String sharedTestDir = 'src/sharedTest/java'
            test {
                java.srcDir sharedTestDir
            }
            androidTest {
                java.srcDir sharedTestDir
            }
        }
    }

    buildTypes {
        debug {
            minifyEnabled true
            // Uses new built-in shrinker http://tools.android.com/tech-docs/new-build-system/built-in-shrinker
            useProguard false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            testProguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguardTest-rules.pro'
        }

        release {
            minifyEnabled true
            useProguard true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            testProguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguardTest-rules.pro'
        }
    }

    flavorDimensions "default"

    // If you need to add more flavors, consider using flavor dimensions.
    productFlavors {
        mock {
            applicationIdSuffix = ".mock"
            dimension "default"
        }
        prod {
            dimension "default"
        }
    }

    // Remove mockRelease as it's not needed.
    android.variantFilter { variant ->
        if (variant.buildType.name == 'release'
                && variant.flavors[0].name == 'mock') {
            variant.ignore = true
        }
    }

    // Always show the result of every unit test, even if it passes.
    testOptions.unitTests.all {
        testLogging {
            events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
        }
    }

    dataBinding {
        enabled = true
    }
}

/*
 Dependency versions are defined in the top level build.gradle file. This helps keeping track of
 all versions in a single place. This improves readability and helps managing project complexity.
 */
dependencies {
    // App's dependencies, including test
    compile "androidx.appcompat:appcompat:$rootProject.supportLibraryVersion"
    compile "androidx.cardview:cardview:$rootProject.supportLibraryVersion"
    compile "com.google.android.material:material:$rootProject.supportLibraryVersion"
    compile "androidx.recyclerview:recyclerview:$rootProject.supportLibraryVersion"
    compile "androidx.legacy:legacy-support-v4:$rootProject.supportLibraryVersion"
    compile "androidx.room:room-runtime:$rootProject.roomVersion"
    kapt "androidx.room:room-compiler:$rootProject.roomVersion"
    compile "com.google.guava:guava:$rootProject.guavaVersion"

    compile "androidx.lifecycle:lifecycle-extensions:$rootProject.archLifecycleVersion"
    annotationProcessor "androidx.lifecycle:lifecycle-compiler:$rootProject.archLifecycleVersion"

    // Dependencies for local unit tests
    testCompile "junit:junit:$rootProject.ext.junitVersion"
    testCompile "org.mockito:mockito-core:$rootProject.ext.mockitoVersion"
    testCompile "org.hamcrest:hamcrest-all:$rootProject.ext.hamcrestVersion"

    testCompile "androidx.arch.core:core-testing:$rootProject.archLifecycleVersion"

    // Android Testing Support Library's runner and rules
    androidTestCompile "androidx.test:runner:$rootProject.ext.runnerVersion"
    androidTestCompile "androidx.test:rules:$rootProject.ext.rulesVersion"

    // Dependencies for Android unit tests
    androidTestCompile "junit:junit:$rootProject.ext.junitVersion"
    androidTestCompile "org.mockito:mockito-android:$rootProject.ext.mockitoVersion"

    // Espresso UI Testing
    androidTestCompile "androidx.test.espresso:espresso-core:$rootProject.espressoVersion"
    androidTestCompile "androidx.test.espresso:espresso-contrib:$rootProject.espressoVersion"
    androidTestCompile "androidx.test.espresso:espresso-intents:$rootProject.espressoVersion"
    androidTestCompile "androidx.test.espresso.idling:idling-concurrent:$rootProject.espressoVersion"
    compile "androidx.test.espresso:espresso-idling-resource:$rootProject.espressoVersion"

    // Resolve conflicts between main and test APK:
    androidTestCompile "androidx.annotation:annotation:$rootProject.supportLibraryVersion"
    androidTestCompile "androidx.legacy:legacy-support-v4:$rootProject.supportLibraryVersion"
    androidTestCompile "androidx.recyclerview:recyclerview:$rootProject.supportLibraryVersion"
    androidTestCompile "androidx.appcompat:appcompat:$rootProject.supportLibraryVersion"
    androidTestCompile "androidx.core:core:$rootProject.supportLibraryVersion"
    androidTestCompile "com.google.android.material:material:$rootProject.supportLibraryVersion"
    androidTestCompile "androidx.test.espresso.idling:idling-concurrent:$rootProject.espressoVersion"
    androidTestCompile "androidx.room:room-testing:$rootProject.roomVersion"
    compile "com.google.code.findbugs:jsr305:2.0.1"
    compile "org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlinVersion"
    kapt "androidx.databinding:databinding-compiler:$gradlePluginVersion"
}

